apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "loadgenerator.fullname" . }}
  labels:
    {{- include "loadgenerator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "loadgenerator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "loadgenerator.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.waitForServices.enabled }}
      initContainers:
        - name: wait-for-services
          image: {{ .Values.initContainer.image }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Waiting for services to be ready..."
              timeout={{ .Values.waitForServices.timeout }}
              interval={{ .Values.waitForServices.checkInterval }}
              start_time=$(date +%s)
              
              # Single check function
              check_service_once() {
                name=$1
                port=$2
                path=$3
                
                if [ -n "$path" ]; then
                  # HTTP health check
                  http_code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 10 "http://$name:$port$path" 2>/dev/null)
                  if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 500 ]; then
                    return 0
                  fi
                else
                  # TCP port check
                  if nc -z $name $port 2>/dev/null; then
                    return 0
                  fi
                fi
                return 1
              }
              
              # Wait for specific service
              wait_for_service() {
                name=$1
                port=$2
                path=$3
                
                echo "Waiting for $name:$port$path"
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  if [ $elapsed -gt $timeout ]; then
                    echo "Timeout waiting for $name"
                    exit 1
                  fi
                  
                  if check_service_once "$name" "$port" "$path"; then
                    echo "$name is ready"
                    return 0
                  fi
                  
                  echo "$name not ready, waiting $interval seconds..."
                  sleep $interval
                done
              }
              
              # Create temporary files for service lists
              ready_services="/tmp/ready_services"
              pending_services="/tmp/pending_services"
              all_services="/tmp/all_services"
              
              # Clear temp files
              > "$ready_services"
              > "$pending_services"
              > "$all_services"
              
              # Create list of all services
              {{- range .Values.waitForServices.services }}
              echo "{{ .name }}:{{ .port }}:{{ .path | default "" }}" >> "$all_services"
              {{- end }}
              
              # First round: parallel check all services
              echo "Performing initial parallel check of all services..."
              
              while IFS= read -r service; do
                if [ -n "$service" ]; then
                  name=$(echo "$service" | cut -d':' -f1)
                  port=$(echo "$service" | cut -d':' -f2)
                  path=$(echo "$service" | cut -d':' -f3)
                  
                  if check_service_once "$name" "$port" "$path"; then
                    echo "$name is ready"
                    echo "$service" >> "$ready_services"
                  else
                    echo "$name is not ready"
                    echo "$service" >> "$pending_services"
                  fi
                fi
              done < "$all_services"
              
              # Count services
              ready_count=$(wc -l < "$ready_services" 2>/dev/null || echo 0)
              pending_count=$(wc -l < "$pending_services" 2>/dev/null || echo 0)
              
              # If all services are ready, exit
              if [ "$pending_count" -eq 0 ]; then
                echo "All services are ready!"
                exit 0
              fi
              
              echo "Ready services: $ready_count"
              echo "Pending services: $pending_count"
              
              # Second round: wait for pending services
              while IFS= read -r service; do
                if [ -n "$service" ]; then
                  name=$(echo "$service" | cut -d':' -f1)
                  port=$(echo "$service" | cut -d':' -f2)
                  path=$(echo "$service" | cut -d':' -f3)
                  wait_for_service "$name" "$port" "$path"
                fi
              done < "$pending_services"
              
              # Clean up temp files
              rm -f "$ready_services" "$pending_services" "$all_services"
              
              echo "All services are ready!"
          resources:
            {{- toYaml .Values.initContainer.resources | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: BASE_URL
              value: "{{ .Values.baseURL }}"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "{{ .Values.opentelemetry.endpoint }}"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_NAME
              value: "{{ include "loadgenerator.fullname" . }}"
            - name: SERVICE_NAMESPACE
              value: "{{ .Release.Namespace }}"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "service.name=loadgenerator,service.namespace={{ .Release.Namespace }},pod.name=$(POD_NAME)"
          args:
            {{- if .Values.config.debug }}
            - "--debug"
            {{- end }}
            - "--threads={{ .Values.config.threads }}"
            - "--sleep={{ .Values.config.sleep }}"
            {{- if .Values.config.chain }}
            - "--chain={{ .Values.config.chain }}"
            - "--count={{ .Values.config.count }}"
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
