apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "loadgenerator.fullname" . }}
  labels:
    {{- include "loadgenerator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "loadgenerator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "loadgenerator.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.waitForServices.enabled }}
      initContainers:
        - name: wait-for-services
          image: {{ .Values.initContainer.image }}
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "Waiting for services to be ready..."
              timeout={{ .Values.waitForServices.timeout }}
              interval={{ .Values.waitForServices.checkInterval }}
              start_time=$(date +%s)
              
              check_service() {
                local name=$1
                local port=$2
                local path=$3
                
                echo "Checking $name:$port$path"
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  if [ $elapsed -gt $timeout ]; then
                    echo "Timeout waiting for $name"
                    exit 1
                  fi
                  
                  if [ -n "$path" ]; then
                    # HTTP health check
                    if curl -f -s --connect-timeout 5 --max-time 10 "http://$name:$port$path" > /dev/null 2>&1; then
                      echo "$name is ready (HTTP)"
                      return 0
                    fi
                  else
                    # TCP port check
                    if nc -z $name $port 2>/dev/null; then
                      echo "$name is ready (TCP)"
                      return 0
                    fi
                  fi
                  
                  echo "$name not ready, waiting $interval seconds..."
                  sleep $interval
                done
              }
              
              {{- range .Values.waitForServices.services }}
              check_service "{{ .name }}" "{{ .port }}" "{{ .path | default "" }}"
              {{- end }}
              
              echo "All services are ready!"
          resources:
            {{- toYaml .Values.initContainer.resources | nindent 12 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: BASE_URL
              value: "{{ .Values.baseURL }}"
          args:
            {{- if .Values.config.debug }}
            - "--debug"
            {{- end }}
            - "--threads={{ .Values.config.threads }}"
            - "--sleep={{ .Values.config.sleep }}"
            {{- if .Values.config.chain }}
            - "--chain={{ .Values.config.chain }}"
            - "--count={{ .Values.config.count }}"
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
